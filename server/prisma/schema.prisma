generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  users       User[]
}

model User {
  id        Int        @id @default(autoincrement())
  name      String
  email     String     @unique
  password  String
  phone     String?
  avatar    String?
  role      Role       @relation(fields: [roleId], references: [id])
  roleId    Int
  createdAt DateTime   @default(now())
  tokens    Token[]
  addresses Address[]
  reviews   Review[]
  cartItems CartItem[]
  orders    Order[]
  wishlists Wishlist[]
}

model Token {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  accessToken  String
  refreshToken String
  ipAddress    String?
  userAgent    String?
  isRevoked    Boolean  @default(false)
  expiresAt    DateTime
  createdAt    DateTime @default(now())
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String
  slug      String     @unique
  parent    Category?  @relation("SubCategory", fields: [parentId], references: [id])
  parentId  Int?
  children  Category[] @relation("SubCategory")
  products  Product[]
  createdAt DateTime   @default(now())
}

model Brand {
  id        Int       @id @default(autoincrement())
  name      String
  slug      String    @unique
  logo      String?
  products  Product[]
  createdAt DateTime  @default(now())
}

model Product {
  id             Int            @id @default(autoincrement())
  name           String
  slug           String         @unique
  price          Float
  discountPrice  Float?
  stock          Int
  imageUrl       String
  description    String
  specifications String?
  isFeatured     Boolean        @default(false)
  category       Category       @relation(fields: [categoryId], references: [id])
  categoryId     Int
  brand          Brand          @relation(fields: [brandId], references: [id])
  brandId        Int
  createdAt      DateTime       @default(now())
  images         ProductImage[]
  reviews        Review[]
  orderItems     OrderItem[]
  cartItems      CartItem[]
  wishlists      Wishlist[]
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  imageUrl  String
}

model Review {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  rating    Int
  comment   String
  createdAt DateTime @default(now())
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  createdAt DateTime @default(now())
}

model Address {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  fullName  String
  phone     String
  street    String
  city      String
  district  String
  ward      String
  isDefault Boolean @default(false)

  Order Order[]
}

model Order {
  id            Int         @id @default(autoincrement())
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  address       Address     @relation(fields: [addressId], references: [id])
  addressId     Int
  totalPrice    Float
  status        String // pending, paid, shipped, delivered, cancelled
  paymentMethod String // cod, momo, vnpay
  paymentStatus String // unpaid, paid, failed
  createdAt     DateTime    @default(now())
  orderItems    OrderItem[]
  payment       Payment?
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Float
}

model CartItem {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
}

model Payment {
  id            Int       @id @default(autoincrement())
  order         Order     @relation(fields: [orderId], references: [id])
  orderId       Int       @unique
  amount        Float
  provider      String
  status        String // success, failed, pending
  transactionId String
  paidAt        DateTime?
}
