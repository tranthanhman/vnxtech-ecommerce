generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  users       User[]
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  phone     String?
  avatar    String?
  roleId    Int
  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  tokens    Token[]
  addresses Address[]
  reviews   Review[]
  cartItems CartItem[]
  orders    Order[]
  wishlists Wishlist[]
  role      Role       @relation(fields: [roleId], references: [id])
  media     Media[]    @relation("UserMedia")
}

model Token {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  accessToken  String
  refreshToken String
  ipAddress    String?
  userAgent    String?
  isRevoked    Boolean  @default(false)
  expiresAt    DateTime
  createdAt    DateTime @default(now())
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  slug      String   @unique
  parentId  Int?
  icon      String?
  createdAt DateTime @default(now())

  children Category[] @relation("SubCategory")
  parent   Category?  @relation("SubCategory", fields: [parentId], references: [id])
  products Product[]
}

model Brand {
  id        Int       @id @default(autoincrement())
  name      String
  slug      String    @unique
  logo      String?
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}

model Product {
  id            Int    @id @default(autoincrement())
  name          String
  slug          String @unique
  price         Float
  discountPrice Float?
  stock         Int
  description   String

  categoryId    Int
  brandId       Int
  thumbnailId   Int?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  thumbnail  Media?      @relation("ProductThumbnail", fields: [thumbnailId], references: [id])
  gallery    Media[]     @relation("ProductGallery") // ✅ rename từ galleryIds → gallery

  category   Category    @relation(fields: [categoryId], references: [id])
  brand      Brand       @relation(fields: [brandId], references: [id])

  specifications ProductSpecification[]
  variants       ProductVariant[]
  reviews        Review[]
  orderItems     OrderItem[]
  cartItems      CartItem[]
  wishlists      Wishlist[]
}

model ProductVariant {
  id            Int      @id @default(autoincrement())
  sku           String   @unique
  name          String
  price         Float
  discountPrice Float?
  stock         Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  productId     Int

  product    Product                @relation(fields: [productId], references: [id])
  options    ProductVariantOption[]
  orderItems OrderItem[]
  cartItems  CartItem[]
  gallery    Media[]                @relation("VariantGallery")
}

model ProductVariantOption {
  id        Int            @id @default(autoincrement())
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  variantId Int
  name      String // "Color", "RAM", etc.
  value     String // "Black", "8GB"
}

model ProductSpecification {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  name      String // "CUDA Cores"
  value     String // "4608"
  unit      String? // Optional: "MHz", "GB"
}

model Media {
  id        Int      @id @default(autoincrement())
  url       String
  type      String
  mimeType  String
  size      Int
  altText   String?
  title     String?
  isPrimary Boolean  @default(false)
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())

  product   Product? @relation("ProductGallery", fields: [productId], references: [id])
  productId Int?

  thumbnailForProducts Product[] @relation("ProductThumbnail")

  productVariant   ProductVariant? @relation("VariantGallery", fields: [productVariantId], references: [id])
  productVariantId Int?

  user    User? @relation("UserMedia", fields: [userId], references: [id])
  userId  Int?
}


model Review {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  rating    Int
  comment   String
  createdAt DateTime @default(now())
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  createdAt DateTime @default(now())
}

model Address {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  fullName  String
  phone     String
  street    String
  city      String
  district  String
  ward      String
  isDefault Boolean @default(false)
  orders    Order[]
}

model Order {
  id            Int         @id @default(autoincrement())
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  address       Address     @relation(fields: [addressId], references: [id])
  addressId     Int
  totalPrice    Float
  status        String // pending, paid, shipped, delivered, cancelled
  paymentMethod String // cod, momo, vnpay
  paymentStatus String // unpaid, paid, failed
  createdAt     DateTime    @default(now())
  orderItems    OrderItem[]
  payment       Payment?
}

model OrderItem {
  id        Int             @id @default(autoincrement())
  order     Order           @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product         @relation(fields: [productId], references: [id])
  productId Int
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  variantId Int?
  quantity  Int
  price     Float
}

model CartItem {
  id        Int             @id @default(autoincrement())
  user      User            @relation(fields: [userId], references: [id])
  userId    Int
  product   Product         @relation(fields: [productId], references: [id])
  productId Int
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  variantId Int?
  quantity  Int
}

model Payment {
  id            Int       @id @default(autoincrement())
  order         Order     @relation(fields: [orderId], references: [id])
  orderId       Int       @unique
  amount        Float
  provider      String
  status        String // success, failed, pending
  transactionId String
  paidAt        DateTime?
}
